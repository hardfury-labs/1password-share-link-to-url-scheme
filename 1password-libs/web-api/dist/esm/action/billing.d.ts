import * as api from "../api";
import * as model from "../model";
import { Context } from "./context";
export declare const getSubscription: (c: Context) => Promise<model.billing.Subscription>;
export declare const getInvoices: (c: Context, page?: number, limit?: number) => Promise<readonly Readonly<{
    stripeInvoiceUID: string;
    accountName: string;
    address: string;
    amountDue: number;
    attemptCount: number;
    attempted: boolean;
    billTo: string;
    charge: Readonly<{
        uid: string;
        amount: number;
        captured: boolean;
        created: string;
        currency: string;
        paid: boolean;
        refunded: boolean;
        amountRefunded: number;
        desc: string;
        failMsg: string;
        failCode: string;
        meta: {
            [x: string]: string;
        };
        email: string;
        statement: string;
        status: string;
        source: Readonly<{
            stripeCardUid: string;
            brand: string;
            country: string;
            isDefault: boolean;
            expMonth: number;
            expYear: number;
            name: string;
            state: string | undefined;
            zip: string | undefined;
            lastFour: string;
        }> | null;
    }> | null;
    closed: boolean;
    currency: string;
    date: string;
    description: string;
    discount: Readonly<{
        coupon: Readonly<{
            stripeCouponUID: string;
            amountOff: number;
            percentOff: number;
            createdAt: string;
            currency: string;
            duration: string;
            durationInMonths: number;
        }> | null;
        start: string;
        end: string;
    }> | null;
    endingBalance: number;
    forgiven: boolean;
    lines: readonly Readonly<{
        stripeInvoiceLineUID: string;
        amount: number;
        currency: string;
        description: string;
        periodStart: string;
        periodEnd: string;
        planUID: string | undefined;
        quantity: number;
        proration: boolean;
        discountable: boolean;
        taxName: string;
    }>[];
    metadata: {
        [x: string]: string;
    };
    nextPaymentAttempt: string;
    willRetry: boolean;
    paid: boolean;
    periodStart: string;
    periodEnd: string;
    startingBalance: number;
    statementDescriptor: string;
    subtotal: number;
    tax: number;
    taxPercent: number;
    total: number;
    taxName: string;
    taxNumber: string;
    isTaxExempt: boolean;
    opTaxNumbers: readonly Readonly<{
        label: string;
        number: string;
        effective: string;
    }>[] | null;
    showDefaultTaxMsg: boolean;
}>[]>;
export declare const getInvoiceDetails: (c: Context, uid: string) => Promise<Readonly<{
    stripeInvoiceUID: string;
    accountName: string;
    address: string;
    amountDue: number;
    attemptCount: number;
    attempted: boolean;
    billTo: string;
    charge: Readonly<{
        uid: string;
        amount: number;
        captured: boolean;
        created: string;
        currency: string;
        paid: boolean;
        refunded: boolean;
        amountRefunded: number;
        desc: string;
        failMsg: string;
        failCode: string;
        meta: {
            [x: string]: string;
        };
        email: string;
        statement: string;
        status: string;
        source: Readonly<{
            stripeCardUid: string;
            brand: string;
            country: string;
            isDefault: boolean;
            expMonth: number;
            expYear: number;
            name: string;
            state: string | undefined;
            zip: string | undefined;
            lastFour: string;
        }> | null;
    }> | null;
    closed: boolean;
    currency: string;
    date: string;
    description: string;
    discount: Readonly<{
        coupon: Readonly<{
            stripeCouponUID: string;
            amountOff: number;
            percentOff: number;
            createdAt: string;
            currency: string;
            duration: string;
            durationInMonths: number;
        }> | null;
        start: string;
        end: string;
    }> | null;
    endingBalance: number;
    forgiven: boolean;
    lines: readonly Readonly<{
        stripeInvoiceLineUID: string;
        amount: number;
        currency: string;
        description: string;
        periodStart: string;
        periodEnd: string;
        planUID: string | undefined;
        quantity: number;
        proration: boolean;
        discountable: boolean;
        taxName: string;
    }>[];
    metadata: {
        [x: string]: string;
    };
    nextPaymentAttempt: string;
    willRetry: boolean;
    paid: boolean;
    periodStart: string;
    periodEnd: string;
    startingBalance: number;
    statementDescriptor: string;
    subtotal: number;
    tax: number;
    taxPercent: number;
    total: number;
    taxName: string;
    taxNumber: string;
    isTaxExempt: boolean;
    opTaxNumbers: readonly Readonly<{
        label: string;
        number: string;
        effective: string;
    }>[] | null;
    showDefaultTaxMsg: boolean;
}>>;
export declare const updateSubscription: (c: Context, newTier: model.billing.Tier | undefined, newPlan: api.billing.Plan | undefined, subscription?: Readonly<{
    stripeSubscriptionUid: string;
    cancelAtPeriodEnd: boolean;
    canceledAt: string;
    currentPeriodEnd: string;
    currentPeriodStart: string;
    endedAt: string;
    quantity: number;
    start: string;
    status: string;
    taxPercent: number;
    effectiveTaxRate: number;
    trialEnd: string;
    trialStart: string;
    taxNumber: string;
    isTaxExempt: boolean;
    country: string;
    provinceOrState: string;
}> | undefined) => Promise<model.billing.Subscription>;
export declare const getValidPromotionFromCode: (c: Context, promoCode: string, accountType: string) => Promise<model.Promotion>;
export declare const getIsValidPurchaseOrderToken: (c: Context, purchaseOrderToken: string) => Promise<any>;
export declare const getIsValidStripePurchaseOrderToken: (c: Context, stripePurchaseOrderToken: string) => Promise<any>;
export declare const requestInvoiceEmail: (c: Context, invoiceUID: string) => Promise<void>;
export declare const addCard: (c: Context, data: api.billing.AddCardRequestBody) => Promise<model.billing.Subscription>;
export declare const updateCard: (c: Context, stripeCardUid: string, data: api.billing.UpdateCardRequestBody) => Promise<model.billing.Subscription>;
export declare const deleteCard: (c: Context, card: api.billing.Card) => Promise<model.billing.Subscription>;
export declare const getCard: (c: Context, stripeCardUid: string) => Promise<api.billing.Card>;
export declare const changeDefaultCard: (c: Context, card: api.billing.Card) => Promise<model.billing.Subscription>;
export declare const getAvailableTiers: (c: Context) => Promise<model.billing.Subscription>;
export declare const getUpgradeTiers: (c: Context) => Promise<model.billing.Tier[]>;
export interface StripeSubscribeData {
    token: string;
    tier?: model.billing.Tier;
    plan?: api.billing.Plan;
    country: string;
    provinceOrState?: string;
    zip?: string;
    taxNumber?: string;
    isTaxExempt?: boolean;
    giftCardCode?: string;
    childAccountCode?: string;
}
export declare const subscribeWithStripe: (c: Context, data: StripeSubscribeData) => Promise<model.billing.Subscription>;
export declare const cancelStripeSubscription: (c: Context) => Promise<model.billing.Subscription>;
export declare const endTrialPeriod: (c: Context) => Promise<void>;
export interface TaxAdvice {
    countryCode: string;
    provinceOrStateCode: string;
    postalCode: string;
    taxRate: number;
    taxRateString: string;
    effectiveTaxRate: number;
    effectiveTaxRateString: string;
    taxName: string;
    allowsExemption: boolean;
    isTaxed: boolean;
    totalPrice: number;
    originalPrice: number;
    useTaxData: boolean;
}
export declare const getTaxAdvice: (c: Context, amount: number, country: string, provinceOrState?: string | undefined, postalCode?: string | undefined) => Promise<TaxAdvice>;
export declare const createAppleSubscription: ({ session }: Context, data: string) => Promise<void>;
