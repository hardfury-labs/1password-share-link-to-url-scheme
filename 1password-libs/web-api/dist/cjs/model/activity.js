"use strict";
Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.Activity = void 0;
var Activity, util_1 = require("../util");
! function(e) {
    var t;
    e.fromLegacyApi = function(e) {
        return {
            actor: {
                uuid: e.actorUuid
            },
            eid: e.eid,
            time: util_1.dateFromGolang(e.time),
            action: e.action,
            objectType: e.objectType || "",
            objectUuid: e.objectUuid || "",
            auxInfo: e.auxInfo || "",
            auxUuid: e.auxUUID || ""
        }
    }, e.fromApi = function(e) {
        return {
            actor: e.actor,
            eid: e.eid,
            time: util_1.dateFromGolang(e.time),
            ipAddress: e.ipAddress,
            action: e.action,
            objectType: e.objectType || "",
            objectUuid: e.objectUuid || "",
            auxInfo: e.auxInfo || "",
            auxUuid: e.auxUUID || ""
        }
    }, e.ObjectType = {
        Account: "account",
        User: "user",
        Signup: "signup",
        Device: "device",
        Group: "group",
        Tier: "tier",
        Plan: "plan",
        GroupMembership: "gm",
        Vault: "vault",
        VaultItem: "item",
        VaultItems: "items",
        VaultItemHistory: "itemhist",
        VaultKey: "vaultkey",
        Template: "template",
        UserVaultAccess: "uva",
        GroupVaultAccess: "gva",
        Invite: "invite",
        EmailChange: "ec",
        ServiceAccount: "sa",
        StripeSubscription: "sub",
        StripeCard: "card",
        StripeEvent: "strpevnt",
        SlackApp: "slackapp",
        File: "file",
        FamilyChildAccount: "famchild",
        Promotion: "promo",
        PromotionOffer: "promoffr",
        CJPartner: "cjprtner",
        ServiceAccountToken: "satoken",
        MigratingUser: "miguser"
    }, e.Action = {
        Verify: "verify",
        Activate: "activate",
        Reactivate: "reactive",
        Suspend: "suspend",
        BeginRecovery: "beginr",
        CancelRecovery: "cancelr",
        CompleteRecovery: "completr",
        Begin: "begin",
        Complete: "complete",
        Propose: "propose",
        Provision: "provsn",
        Join: "join",
        Create: "create",
        Update: "update",
        Delete: "delete",
        Purge: "purge",
        ReAuth: "reauth",
        Convert: "convert",
        Cancel: "cancel",
        EnableMFA: "enblmfa",
        UpdateMFA: "updatmfa",
        DisableMFA: "disblmfa",
        EnableDuo: "enblduo",
        UpdateDuo: "updatduo",
        DisableDuo: "disblduo",
        Hide: "hide",
        Unhide: "unhide",
        Patch: "patch",
        Grant: "grant",
        Revoke: "revoke",
        TokenRename: "trename",
        TokenRevoke: "trevoke",
        TokenVerify: "tverify",
        GroupJoin: "join",
        GroupLeave: "leave",
        GroupRole: "role",
        Refund: "refund",
        ResetBilling: "resbill",
        AddPromotion: "addpromo",
        RemovePromotion: "rmpromo",
        RedeemPromotion: "rdmpromo",
        RevokePromotion: "rvkpromo",
        EnableThanksGivingPromo: "enbltgp",
        DisableThanksGivingPromo: "disbltgp",
        AddCoupon: "addcoupn",
        EmailDeletion: "emaildel",
        ResendEmail: "rsndmail",
        ResendProvisionStartedEmail: "resendts",
        ResendAllProvisionStartedEmail: "prsndall",
        EnableTravel: "trvlaway",
        DisableTravel: "trvlback",
        ChangeKeyset: "changeks",
        ChangeMasterPassword: "changemp",
        ChangeSecretKey: "changesk",
        ChangeName: "changenm",
        ChangeLanguage: "changela",
        UpdateAttributes: "updatea",
        AttachChild: "attchild",
        DetachChild: "detchild",
        RedeemChild: "rdmchild",
        UpdateFirewallRule: "updatfw",
        DeauthorizeOldDevices: "deolddev",
        DeauthorizeAllDevices: "dealldev",
        Send: "sendpkg",
        Share: "share",
        DeleteShare: "delshare",
        Unknown: "unknown",
        Reject: "reject",
        AddCredit: "addcred",
        SetCoupon: "setcoupn",
        RemoveCoupon: "rmcoupn",
        ChangeTier: "changetr",
        ResetTrial: "restrial",
        EndTrial: "endtrial",
        RecalculateAccountTrial: "recaltrl",
        AddPurchaseOrder: "addpo",
        AddStripePurchaseOrder: "addspo",
        RetryInvoice: "retryinv",
        Ignore: "ignore",
        Requeue: "requeue",
        ClearCache: "clrcache",
        UpdatePurchaseOrder: "updatepo",
        UpdateStripePurchaseOrder: "udatespo",
        ClearFailedMFACount: "clrflmfa",
        AddTaxNumber: "addtxnum",
        RemoveTaxNumber: "rmtaxnum",
        RetryAppleReceipt: "rtaplrct",
        Replace: "replace",
        AddVerifiedDomain: "vrfydmn",
        UpdateVerifiedDomain: "uvrfydmn",
        DeleteVerifiedDomain: "dvrfydmn",
        ActionMigratingUserComplete: "musercom",
        ActionMigratingUserDeclined: "muserdec",
        ActionAddAccountTransfer: "addaxfr",
        ActionRemoveAccountTransfer: "remaxfr"
    }, e.Category = {
        Users: "users",
        UserAccess: "userAccess",
        Groups: "groups",
        GroupAccess: "groupAccess",
        Vaults: "vaults",
        VaultItems: "vaultItems",
        SharedItems: "sharedItems",
        Invitations: "invitations",
        Devices: "devices",
        AccountChanges: "accountChanges",
        EmailChanges: "emailChanges",
        FileUploads: "fileUploads",
        Billing: "billing",
        LinkedFamilyAccounts: "linkedFamilyAccounts"
    }, e.Categories = ((t = {})[e.Category.Users] = [e.ObjectType.User], t[e.Category.UserAccess] = [e.ObjectType.UserVaultAccess], t[e.Category.Groups] = [e.ObjectType.Group, e.ObjectType.GroupMembership], t[e.Category.GroupAccess] = [e.ObjectType.GroupVaultAccess], t[e.Category.Vaults] = [e.ObjectType.Vault, e.ObjectType.VaultKey, e.ObjectType.Template], t[e.Category.VaultItems] = [e.ObjectType.VaultItems], t[e.Category.SharedItems] = [e.ObjectType.VaultItem], t[e.Category.Invitations] = [e.ObjectType.Invite], t[e.Category.Devices] = [e.ObjectType.Device], t[e.Category.AccountChanges] = [e.ObjectType.Account], t[e.Category.EmailChanges] = [e.ObjectType.EmailChange], t[e.Category.FileUploads] = [e.ObjectType.File], t[e.Category.Billing] = [e.ObjectType.StripeSubscription, e.ObjectType.StripeCard], t[e.Category.LinkedFamilyAccounts] = [e.ObjectType.FamilyChildAccount], t)
}(Activity = exports.Activity || (exports.Activity = {}));